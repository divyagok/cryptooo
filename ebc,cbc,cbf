from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad
from Crypto.Util.strxor import strxor
import os

# ECB Mode
def ecb_encrypt(plaintext, key):
    cipher = AES.new(key, AES.MODE_ECB)
    return cipher.encrypt(pad(plaintext, AES.block_size))

def ecb_decrypt(ciphertext, key):
    cipher = AES.new(key, AES.MODE_ECB)
    return unpad(cipher.decrypt(ciphertext), AES.block_size)

# CBC Mode
def cbc_encrypt(plaintext, key, iv):
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return cipher.encrypt(pad(plaintext, AES.block_size))

def cbc_decrypt(ciphertext, key, iv):
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return unpad(cipher.decrypt(ciphertext), AES.block_size)

# CFB Mode
def cfb_encrypt(plaintext, key, iv):
    cipher = AES.new(key, AES.MODE_CFB, iv, segment_size=128)
    return cipher.encrypt(plaintext)

def cfb_decrypt(ciphertext, key, iv):
    cipher = AES.new(key, AES.MODE_CFB, iv, segment_size=128)
    return cipher.decrypt(ciphertext)

# Test ECB mode
key = get_random_bytes(16)
plaintext = b'This is a test message for ECB mode.'
ciphertext = ecb_encrypt(plaintext, key)
decrypted_text = ecb_decrypt(ciphertext, key)
print("ECB Decrypted text:", decrypted_text.decode())

# Test CBC mode
key = get_random_bytes(16)
iv = os.urandom(AES.block_size)
plaintext = b'This is a test message for CBC mode.'
ciphertext = cbc_encrypt(plaintext, key, iv)
decrypted_text = cbc_decrypt(ciphertext, key, iv)
print("CBC Decrypted text:", decrypted_text.decode())

# Test CFB mode
key = get_random_bytes(16)
iv = os.urandom(AES.block_size)
plaintext = b'This is a test message for CFB mode.'
ciphertext = cfb_encrypt(plaintext, key, iv)
decrypted_text = cfb_decrypt(ciphertext, key, iv)
print("CFB Decrypted text:", decrypted_text.decode())
